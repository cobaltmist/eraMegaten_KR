;이벤트は全部ビット演算を使うことにする
;改造)	이벤트1つ毎に2つのビットを사용し未読체크を行う様に
;		その関係で1つの変数に保存できる이벤트数は64個から32個に減少
;이벤트ベースは内部処理に特化し、【이벤트作りたい人が見なくてもいい部分】として独立化。

;====================
;조건
;====================
@PLAYABLE_EVENT_10
#DIM L_INDEX
VARSET LOCAL
;インデックスを参照
;参照する配列とBIT値を得る為二重ループ
;現在は10×32の320個まで作成できる計算。
;増やしたい場合は↓の行の"LOCAL,0,10"の最後の10を増やせばOK(최대100)
FOR L_INDEX,0,20
	FOR LOCAL,0,32
		TRYCCALLFORM EVENT_10_PLAYABLE_{L_INDEX} , LOCAL
		CATCH
			BREAK
		ENDCATCH
		SIF !RESULT && !GETBIT(이벤트플래그:10:L_INDEX,LOCAL)
			CONTINUE
		IF !GETBIT(이벤트플래그:10:L_INDEX,LOCAL+32)
			SETBIT 이벤트플래그:10:L_INDEX,LOCAL+32
			CALLFORM EVENT_10_TITLELIST_{L_INDEX} , LOCAL
			LOCALS = 교섭 이벤트 【%RESULTS%】 출현！
			CALL MESSAGE_B(1, LOCALS)
		ENDIF
		;まだ見てない이벤트の数をカウント
		SIF !GETBIT(이벤트플래그:10:L_INDEX,LOCAL)
			LOCAL:1++
		LOCAL:2++
	NEXT
NEXT
IF LOCAL:1 > 0
	RESULTS = 교섭 이벤트 \(新着{LOCAL:1}個\)
ELSE
	RESULTS = 교섭 이벤트
ENDIF
SIF LOCAL:2
	RETURN 1

;====================
;内容
;====================
@SHOPCOM_EVENT_10
#DIM L_INDEX
CUSTOMDRAWLINE =
PRINTFORML 어떤 교섭 이벤트를 봅니까？
CUSTOMDRAWLINE =

FOR L_INDEX,0,20
	FOR LOCAL,0,32
		TRYCCALLFORM EVENT_10_PLAYABLE_{L_INDEX} , LOCAL
		CATCH
			BREAK
		ENDCATCH
		SIF !RESULT && !GETBIT(이벤트플래그:10:L_INDEX,LOCAL)
			CONTINUE
		CALLFORM EVENT_10_TITLELIST_{L_INDEX} , LOCAL
		;SIF RESULT == 0
		;	CONTINUE
		PRINTFORM [{L_INDEX*100+LOCAL,4}] %RESULTS%
		SIF GETBIT(이벤트플래그:10:L_INDEX,LOCAL)
			PRINT (回想)
		PRINTL
	NEXT
NEXT
PRINTFORML [9999]돌아간다
$INPUT_LOOP
INPUT
SIF RESULT == 9999
	RETURN
LOCAL:3 = RESULT / 100
LOCAL:4 = RESULT % 100
TRYCCALLFORM EVENT_10_PLAYABLE_{LOCAL:3} , LOCAL:4
	SIF !RESULT && !GETBIT(이벤트플래그:10:(LOCAL:3),LOCAL:4)
		GOTO END_EVENT
	CALLFORM EVENT_10_MAINEVENT_{LOCAL:3} , LOCAL:4
	PRINTL
	PRINTL
	;既読にする
	SETBIT 이벤트플래그:10:(LOCAL:3),LOCAL:4
	RESTART
CATCH
ENDCATCH
$END_EVENT
CLEARLINE 1
GOTO INPUT_LOOP

;====================
;出現チェック関数
;====================
@EVENT10_APP_CHECK,ARG,ARG:1
#FUNCTION
RETURNF GETBIT(이벤트플래그:10:ARG,ARG:1+32)

;====================
;既読チェック関数
;====================
@EVENT10_READ_CHECK,ARG,ARG:1
#FUNCTION
RETURNF GETBIT(이벤트플래그:10:ARG,ARG:1)

;------
;使用例
;------
;雰囲気の違う足使い達1をクリアしたかどうか
;SIF EVENT10_READ_CHECK(0,1)
;	RETURN 1

;====================
;出現チェック関数(타이틀で)
;====================
@EVENT10_APP_CHECK_T,ARGS = ""
#DIM L_INDEX,2
SIF ARGS == ""
	RETURN 0
FOR L_INDEX,0,20
	FOR L_INDEX:1,0,32
		TRYCCALLFORM EVENT_10_TITLELIST_{L_INDEX} , L_INDEX:1
			SIF ARGS == RESULTS
				RETURN GETBIT(이벤트플래그:10:L_INDEX,L_INDEX:1+32)
		CATCH
			BREAK
		ENDCATCH
	NEXT
NEXT
RETURN 0

;====================
;既読チェック関数(타이틀で)
;====================
@EVENT10_READ_CHECK_T,ARGS = ""
#DIM L_INDEX,2
SIF ARGS == ""
	RETURN 0
FOR L_INDEX,0,20
	FOR L_INDEX:1,0,32
		TRYCCALLFORM EVENT_10_TITLELIST_{L_INDEX} , L_INDEX:1
			SIF ARGS == RESULTS
				RETURN GETBIT(이벤트플래그:10:L_INDEX,L_INDEX:1)
		CATCH
			BREAK
		ENDCATCH
	NEXT
NEXT
RETURN 0

;------
;使用例
;------
;雰囲気の違う足使い達1を既読したかどうか
;CALL EVENT10_READ_CHECK_T("雰囲気の違う足使い達1")
;SIF RESULT
;	RETURN 1