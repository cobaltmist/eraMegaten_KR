;********************************************************************************************
;2020/06/19 作成 なんとなくパッチを作ってる人
;
;Licence  :ライセンスフリー(CC0)。
;*画像リソースに関してはリソース内にあるreadme&利用規約に従って下さい
;
;画像表示関連の処理
;********************************************************************************************

;*******************************************************************************************************
;画像生成
;指定したキャラ番号に対して、画像エディットで設定した内容で画像の生成/スプライト登録を行う
;*生成した画像は画面ごとに横並びで配置される
;*******************************************************************************************************
@モブ画像_生成(キャラ番号)
#DIM キャラ番号		; キャラ番号(グラフィックIDも兼ねる)
#DIM _CNT			; カウンタ
#DIM 登録画像サイズ = 画像サイズ_小 ; 画像の縦横サイズ（正方形）、元画像の画像サイズでは無いので注意
#DIMS 合成画像スプライト	; 合成画像生成した結果のスプライト文字列を収納（「合成画像生成」関数後のRESULT）
#DIM 合計画面数		; 設定対象の合計画面数
#DIMS 設定画面名	; 設定対象の画面名
#DIMS パーツ文字列	; 表示対象のパーツ文字列

; 合計画面数を取得
SPLIT 画像エディット_設定画面リスト, ",", LOCALS
合計画面数 = (RESULT - 1)

; 合成画面を初期化
CALL 合成画像領域初期化
CALL 画像領域初期化(キャラ番号, 登録画像サイズ * 合計画面数, 登録画像サイズ)

; LOCALSの上書きを避けるため、画面名を再度取得
SPLIT 画像エディット_設定画面リスト, ",", LOCALS
FOR _CNT, 0, 合計画面数
	設定画面名 '= LOCALS:(_CNT + 1)
	パーツ文字列 '= CSTR:キャラ番号:@"画像エディットパーツ_%設定画面名%画面"
	
	; パーツ文字列が空なら次へ
	SIF パーツ文字列 == ""
		CONTINUE
	
	; 合成画像を生成
	CALL 合成画像生成(パーツ文字列)
	合成画像スプライト '= RESULTS
	GDRAWSPRITE キャラ番号, 合成画像スプライト, 登録画像サイズ * _CNT, 0, 登録画像サイズ, 登録画像サイズ

	; スプライト登録
	CALL モブ画像_スプライト登録(キャラ番号, 設定画面名, _CNT, 4, 登録画像サイズ)
	CALL モブ画像_スプライト登録(キャラ番号, 設定画面名, _CNT, 6, 登録画像サイズ)
NEXT

;*******************************************************************************************************
;画像のスプライト登録を行う
;*******************************************************************************************************
@モブ画像_スプライト登録(キャラ番号, 設定画面名, 設定画面番号, 画像分割数, 登録画像サイズ)
#DIM キャラ番号		; キャラ番号(グラフィックIDも兼ねる)
#DIMS 設定画面名	; 設定対象の画面名
#DIM 設定画面番号	; 横並びにする際の画面ごとの番号
#DIM 画像分割数		; 画像を縦に分割するかの値
#DIM 登録画像サイズ	; 画像の縦横サイズ（正方形）
#DIM _CNT			; カウンタ
#DIM スプライト縦幅	; 1行分の画像スプライト縦幅
スプライト縦幅 = (登録画像サイズ / 画像分割数)
FOR _CNT, 0, 画像分割数
	SPRITECREATE @"モブ画像_{キャラ番号}_%設定画面名%_{画像分割数}_{_CNT + 1}", キャラ番号, (登録画像サイズ * 設定画面番号), (スプライト縦幅 * _CNT), 登録画像サイズ, スプライト縦幅
NEXT

;*******************************************************************************************************
;画像のグラフィック領域/スプライトの破棄を行う
;*******************************************************************************************************
@モブ画像_リセット(キャラ番号)
#DIM キャラ番号		; キャラ番号(グラフィックIDも兼ねる)
#DIM _CNT			; カウンタ
#DIM 合計画面数		; 設定対象の合計画面数
#DIMS 設定画面名	; 設定対象の画面名

; 画像領域が存在しない場合、処理を抜ける
SIF !GCREATED(キャラ番号)
	RETURN

; スプライトの破棄
SPLIT 画像エディット_設定画面リスト, ",", LOCALS
合計画面数 = (RESULT - 1) ; 全画面は対象外なので、-1
FOR _CNT, 0, 合計画面数
	設定画面名 '= LOCALS:(_CNT + 1)
	; スプライト破棄
	CALL モブ画像_スプライト破棄(キャラ番号, 設定画面名, 4)
	CALL モブ画像_スプライト破棄(キャラ番号, 設定画面名, 6)
NEXT

; グラフィック領域の破棄
GDISPOSE キャラ番号

;*******************************************************************************************************
;画像のスプライト破棄を行う
;*******************************************************************************************************
@モブ画像_スプライト破棄(キャラ番号, 設定画面名, 画像分割数)
#DIM キャラ番号		; キャラ番号(グラフィックIDも兼ねる)
#DIMS 設定画面名	; 設定対象の画面名
#DIM 設定画面番号	; 横並びにする際の画面ごとの番号
#DIM 画像分割数		; 画像を縦に何分割するかの値
#DIM _CNT
FOR _CNT, 0, 画像分割数
	SPRITEDISPOSE @"モブ画像_{キャラ番号}_%設定画面名%_{画像分割数}_{_CNT + 1}"
NEXT

;*******************************************************************************************************
;画像エディットの設定があるかの確認、ある場合は1を返す
;*******************************************************************************************************
@モブ画像_設定確認(キャラ番号, 設定画面名)
#FUNCTION
#DIM キャラ番号		; キャラ番号(グラフィックIDも兼ねる)
#DIMS 設定画面名	; 設定対象の画面名

; CONFIGの描画インターフェースがWINAPIの場合、合成画像が作れないので0を返して処理を抜ける
SIF GETCONFIGS("描画インターフェース") == "WINAPI"
	RETURNF 0

; 画像エディットを使用しない設定の場合、0を返して処理を抜ける
SIF FLAG:화상에디트설정 != 0
	RETURNF 0

SIF キャラ番号 < 0
	RETURNF 0

RETURNF (CSTR:キャラ番号:@"画像エディットパーツ_%設定画面名%画面" != "")

;*******************************************************************************************************
;画像エディットで設定した画像を表示する
;*******************************************************************************************************
@モブ画像_表示(キャラ番号, 設定画面名, 描画対象の行, 画画像表示サイズ)
#DIM キャラ番号			; キャラ番号(グラフィックIDも兼ねる)
#DIMS 設定画面名		; 設定対象の画面名
#DIM 画画像表示サイズ	; 0で小(4行)、1で大(6行)
#DIM 画像分割数			; 画像表示する際の行数
#DIM 描画対象の行		; 現在の描画行

; CONFIGの描画インターフェースがWINAPIの場合、合成画像が作れないので処理を抜ける
SIF GETCONFIGS("描画インターフェース") == "WINAPI"
	RETURN

SIF キャラ番号 < 0
	RETURN

; 画像設定がなければ処理を抜ける
SIF !モブ画像_設定確認(キャラ番号, 設定画面名)
	RETURN

画像分割数 = (画画像表示サイズ == 1 ? 6 # 4)

; スプライト登録がされてなかったら画像生成
SIF !SPRITECREATED(@"モブ画像_{キャラ番号}_%設定画面名%_{画像分割数}_{描画対象の行}")
	CALL モブ画像_生成(キャラ番号)

PRINT_IMG @"モブ画像_{キャラ番号}_%設定画面名%_{画像分割数}_{描画対象の行}"