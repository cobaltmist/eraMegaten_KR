;********************************************************************************************
;2020/06/19 作成 なんとなくパッチを作ってる人
;
;Licence  :ライセンスフリー(CC0)。
;*画像リソースに関してはリソース内にあるreadme&利用規約に従って下さい
;
;画像エディット画面の処理
;********************************************************************************************

;********************************************************************************************
;画像エディット画面のメイン処理
;********************************************************************************************
@画像エディット画面(キャラ番号)
#DIM キャラ番号				; キャラ番号
#DIMS _KEY					; キー入力値
#DIMS SELECTEDKEY = ""		; 選択中のキー
#DIMS SELECTEDKEY_LIST = ""	; 選択中のパーツリスト
#DIM _CNT					; カウンタ
#DIM 開始ライン				; 画像エディット開始時の文字ライン（処理ごとにこのラインまで削除）
#DIMS 選択項目				; 入力の後方部分を抜き出した項目を格納
#DIMS 合成画像スプライト	; 合成画像生成した結果のスプライト文字列を収納（「合成画像生成」関数後のRESULT）
#DIMS 設定画面名			; 設定対象の画面名
#DIMS 個別画像設定			; 「CSTR:キャラ番号:画像エディットパーツ_%設定画面名%画面」の値を収納
#DIMS 個別画像状態			; 個別画像設定の状態を収納、内容は(未設定)/(設定済)/(変更有)のいずれか

; CONFIGの描画インターフェースがWINAPIの場合、合成画像が作れないので処理を抜ける
IF GETCONFIGS("描画インターフェース") == "WINAPI"
	DRAWLINE
	PRINTL emuera.config にて、描画インターフェースにWINAPIが指定されているため画像エディット機能が使用できません。
	PRINTL 描画インターフェース設定を変えるか、オプションから화상에디트설정を[使用しない]に変更して下さい。
	INPUTS
	RETURN
ENDIF

CALL 合成画像領域初期化

; 画像エディット_パーツ文字列が空の場合は、初期化する
IF 画像エディット_パーツ文字列 == ""
	画像エディット_パーツ文字列 '= パーツ初期設定()
	画像エディット_顔絵フラグ = (DIC_GET(画像エディット_パーツ文字列, "画像種別") == "顔絵")
ENDIF

開始ライン = LINECOUNT
WHILE 1
	CLEARLINE (LINECOUNT - 開始ライン)

	; パーツ文字列表示
	;DRAWLINE
	;PRINTFORML 【パーツ文字列】
	;PRINTFORML %画像エディット_パーツ文字列%

	DRAWLINE

	; 上部選択項目表示
	CALL 画像エディット_上部選択肢表示(SELECTEDKEY, SELECTEDKEY_LIST)

	; 画像描画
	CALL 合成画像生成(画像エディット_パーツ文字列)
	合成画像スプライト '= RESULTS
	HTML_PRINT @"<nobr><nonbutton pos = '0'><img src = '%合成画像スプライト%' height = '%TOSTR(SPRITEHEIGHT(合成画像スプライト)*100/GETCONFIG("フォントサイズ"))%'></nonbutton>"

	; 画面右メニュー表示
	CALL DIC_FOREACH(画像エディット_パーツ文字列, "画像エディット_右メニュー表示")
	DRAWLINE
	
	; 画像設定
	PRINTSL "【画像の設定・読込】"
	SPLIT 画像エディット_設定画面リスト, ",", LOCALS
	FOR _CNT, 0, RESULT
		設定画面名 '= LOCALS:_CNT

		;画像の設定状態を取得
		IF 設定画面名 == "全画面"
			個別画像状態 '= "　　　　"
		ELSE
			個別画像設定 '= CSTR:キャラ番号:@"画像エディットパーツ_%設定画面名%画面"
			IF 個別画像設定 == ""
				個別画像状態 '= "(未設定)"
			ELSEIF 個別画像設定 == 画像エディット_パーツ文字列
				個別画像状態 '= "(設定済)"
			ELSE
				個別画像状態 '= "(変更有)"
			ENDIF
		ENDIF

		PRINTS @"%設定画面名, 12, LEFT%："
		PRINTBUTTON @"[設定%個別画像状態%]", @"画像設定_%設定画面名%"
		IF 設定画面名 == "全画面"
			PRINTFORM 　　　
		ELSE
			;FONTSTYLE 4
			;PRINT [読込]
			;FONTSTYLE 0
			PRINTBUTTON "[読込]", "画像読込_" + 設定画面名
		ENDIF
		PRINTBUTTON "[設定を削除]", "画像削除_" + 設定画面名
		PRINTL
	NEXT

	DRAWLINE
	PRINTBUTTON "[画像エディットを終了]", "終了"

	; 入力処理
	INPUTS
	_KEY '= RESULTS
	SIF _KEY == ""
		CONTINUE

	; 個別処理
	SELECTCASE _KEY
		CASE "終了"
			return
		CASE "切り替え_顔絵フラグ"
			画像エディット_顔絵フラグ = !画像エディット_顔絵フラグ
			画像エディット_パーツ文字列 '= DIC_SET(画像エディット_パーツ文字列, "画像種別", (画像エディット_顔絵フラグ ? "顔絵" # "全身"))
		CASE "切り替え_全要素装飾指定率"
			画像エディット_全要素装飾指定率 += 25
			SIF 100 < 画像エディット_全要素装飾指定率
				画像エディット_全要素装飾指定率 -= 125
		CASE "切り替え_全装飾装飾指定率"
			画像エディット_全装飾装飾指定率 += 25
			SIF 100 < 画像エディット_全装飾装飾指定率
				画像エディット_全装飾装飾指定率 -= 125
	ENDSELECT

	; パーツ固定・解除
	IF (-1 < STRFINDU(_KEY, "固定_"))
		選択項目 '= SUBSTRINGU(_KEY, 3, -1)
		画像エディット_パーツ固定設定 '= DIC_SET(画像エディット_パーツ固定設定, 選択項目, (DIC_GET(画像エディット_パーツ固定設定, 選択項目) == "固定" ? "なし" # "固定"))
	ENDIF

	; パーツランダム変更
	IF (-1 < STRFINDU(_KEY, "ランダム_"))
		選択項目 '= SUBSTRINGU(_KEY, 5, -1)
		CALL 画像エディット_ランダム処理(選択項目)
	ENDIF

	; パーツクリア
	IF (-1 < STRFINDU(_KEY, "クリア_"))
		選択項目 '= SUBSTRINGU(_KEY, 4, -1)
		CALL 画像エディット_クリア処理(選択項目)
	ENDIF

	; パーツ詳細指定＆画像リソース変更
	IF (DIC_CONTAINSKEY(パーツ選択肢(), パーツ選択項目調整(_KEY)))
		IF (SUBSTRINGU(_KEY, 0, 2) == "分類")
			; 分類の際は更新しない
			SELECTEDKEY_LIST '= SELECTEDKEY + "," + DIC_GET(パーツ選択肢(), パーツ選択項目調整(_KEY))
		ELSE
			SELECTEDKEY '= _KEY
			SELECTEDKEY_LIST '= DIC_GET(パーツ選択肢(), パーツ選択項目調整(_KEY))
		ENDIF
	ENDIF
	IF (SELECTEDKEY != "")
		IF (LIST_INDEXOF(SELECTEDKEY_LIST, _KEY) >= 0)
			; パーツ文字列変更
			画像エディット_パーツ文字列 '= DIC_SET(画像エディット_パーツ文字列, SELECTEDKEY, _KEY)

			; 画像リソース変更
			IF SELECTEDKEY == "画像リソース"
				画像エディット_パーツセット名 '= _KEY
				画像エディット_パーツ文字列 '= パーツ初期設定()
				画像エディット_顔絵フラグ = (DIC_GET(画像エディット_パーツ文字列, "画像種別") == "顔絵")
			ENDIF
		ENDIF
	ENDIF

	; 画像設定
	IF (-1 < STRFINDU(_KEY, "画像設定_"))
		設定画面名 '= SUBSTRINGU(_KEY, 5, -1)
		IF 設定画面名 == "全画面"
			CSTR:キャラ番号:画像エディットパーツ_セットアップ画面 '= 画像エディット_パーツ文字列
			CSTR:キャラ番号:画像エディットパーツ_ショップ画面 '= 画像エディット_パーツ文字列
			CSTR:キャラ番号:画像エディットパーツ_能力確認画面 '= 画像エディット_パーツ文字列
			CSTR:キャラ番号:画像エディットパーツ_調教画面 '= 画像エディット_パーツ文字列
		ELSE
			CSTR:キャラ番号:@"画像エディットパーツ_%設定画面名%画面" '= 画像エディット_パーツ文字列
		ENDIF
		; そのキャラの画像領域がある場合、破棄しておく
		CALL モブ画像_リセット(キャラ番号)
	ENDIF

	; 画像読込
	IF (-1 < STRFINDU(_KEY, "画像読込_"))
		設定画面名 '= SUBSTRINGU(_KEY, 5, -1)
		画像エディット_パーツ文字列 '= CSTR:キャラ番号:@"画像エディットパーツ_%設定画面名%画面"
		;画像セットの変更
		画像エディット_パーツセット名 '= DIC_GET(画像エディット_パーツ文字列, "画像リソース")
		画像エディット_顔絵フラグ = (DIC_GET(画像エディット_パーツ文字列, "画像種別") == "顔絵")
		;PRINTFORMW {画像エディット_顔絵フラグ}
	ENDIF

	; 画像削除
	IF (-1 < STRFINDU(_KEY, "画像削除_"))
		設定画面名 '= SUBSTRINGU(_KEY, 5, -1)
		IF 設定画面名 == "全画面"
			CSTR:キャラ番号:画像エディットパーツ_セットアップ画面 '= ""
			CSTR:キャラ番号:画像エディットパーツ_ショップ画面 '= ""
			CSTR:キャラ番号:画像エディットパーツ_能力確認画面 '= ""
			CSTR:キャラ番号:画像エディットパーツ_調教画面 '= ""
		ELSE
			CSTR:キャラ番号:@"画像エディットパーツ_%設定画面名%画面" '= ""
		ENDIF
	ENDIF
WEND

;********************************************************************************************
;画像エディット画面：上部選択肢表示
;********************************************************************************************
@画像エディット_上部選択肢表示(SELECTEDKEY, SELECTEDKEY_LIST)
#DIMS SELECTEDKEY		; 選択中のキー
#DIMS SELECTEDKEY_LIST	; 選択中のパーツリスト

IF SELECTEDKEY != ""
	PRINTSL "【選択:" + SELECTEDKEY + "】"
	画像エディット_上部選択項目文字列 '= ""
	CALL LIST_FOREACH(SELECTEDKEY_LIST, "画像エディット_上部選択項目生成", SELECTEDKEY)
	HTML_PRINT 画像エディット_上部選択項目文字列
	DRAWLINE
ENDIF

;********************************************************************************************
;画像エディット画面：上部選択項目文字列の生成処理
; LIST_FOREACH用
;********************************************************************************************
@画像エディット_上部選択項目生成(_VALUE, SELECTEDKEY)
#DIMS _VALUE		; リスト内から抽出した値
#DIMS SELECTEDKEY	; 選択中のキー
画像エディット_上部選択項目文字列 += "<button value = '" + _VALUE + "'>["+ パーツ名抽出(_VALUE, SELECTEDKEY) +"]</button> "

;********************************************************************************************
;画像エディット画面：右メニュー表示
; DIC_FOREACH用
;********************************************************************************************
@画像エディット_右メニュー表示(_KEY, _VALUE, _PARAM)
#DIMS _KEY				; リスト内のキー要素
#DIMS _VALUE			; リスト内の値
#DIMS _PARAM			; DIG_FOREACHで使用する追加パラメータ
#DIMS HTML_BUTTON		; ボタン要素付きHTML文字列
#DIMS 正式パーツ名称	; "前髪_ボブカット"のような、パーツ名称
#DIM 左余白の文字数 = 40			; 文字が画像に重ならないようにするための余白領域
#DIM パーツ文字列の想定文字数 = 35	; 文字が画像に重ならないようにするための余白領域

正式パーツ名称 = %_KEY%:%パーツ名抽出(_VALUE)%

SELECTCASE _KEY
  CASE "前髪"
	PRINTL
	HTML_BUTTON = <nobr>
	HTML_BUTTON += " " * (左余白の文字数 + パーツ文字列の想定文字数)
	HTML_BUTTON += "<button value='ランダム_全要素'>[ランダム(全要素)]</button> "
	HTML_BUTTON += @"<button value='切り替え_全要素装飾指定率'>[装飾指定率({画像エディット_全要素装飾指定率}％)]</button> "
	HTML_PRINT HTML_BUTTON
	PRINTL
	HTML_BUTTON = <nobr>
	HTML_BUTTON += " " * (左余白の文字数 + パーツ文字列の想定文字数)
	HTML_BUTTON += "<button value='ランダム_全身'>[ランダム(全身)]</button> "
	HTML_PRINT HTML_BUTTON
  CASE "装飾0"
  	PRINTL
	HTML_BUTTON = <nobr>
	HTML_BUTTON += " " * (左余白の文字数 + パーツ文字列の想定文字数)
	HTML_BUTTON += "<button value='ランダム_全装飾'>[ランダム(全装飾)]</button> "
	HTML_BUTTON += @"<button value='切り替え_全装飾装飾指定率'>[装飾指定率({画像エディット_全装飾装飾指定率}％)]</button> "
	HTML_BUTTON += "<button value='クリア_全装飾'>[一括クリア]</button> "
	HTML_PRINT HTML_BUTTON
  CASE "髪色"
	PRINTL
	HTML_BUTTON = <nobr>
	HTML_BUTTON += " " * (左余白の文字数 + パーツ文字列の想定文字数)
	HTML_BUTTON += "<button value='ランダム_全色'>[ランダム(全色)]</button> "
	HTML_PRINT HTML_BUTTON
ENDSELECT

HTML_BUTTON = <nobr>
HTML_BUTTON += " " * 左余白の文字数
HTML_BUTTON += "<nonbutton>" + 正式パーツ名称 + "</nonbutton>"
LOCAL = (パーツ文字列の想定文字数 - STRLENS(正式パーツ名称))
SIF LOCAL < 1
  LOCAL = 1
HTML_BUTTON += " " * LOCAL
SELECTCASE _KEY
  CASE "画像リソース"
	HTML_BUTTON += "<button value='" + _KEY + "'>[選択]</button> "
  CASE "画像種別"
	HTML_BUTTON += "<button value='切り替え_顔絵フラグ'>[切り替え]</button> "
  CASE "装飾0","装飾1","装飾2","装飾3","装飾4","装飾5","装飾6","装飾7","装飾8","装飾9", 
	HTML_BUTTON += "<button value='" + _KEY + "'>[選択]</button> "
	IF DIC_GET(画像エディット_パーツ固定設定, _KEY) == "固定"
		HTML_BUTTON += "<button value='固定_" + _KEY + "'>[解除]</button> "
		HTML_BUTTON += "<s><button>[ランダム]</button></s> "
		HTML_BUTTON += "<s><button>[クリア]</button></s> "
	ELSE
		HTML_BUTTON += "<button value='固定_" + _KEY + "'>[固定]</button> "
		HTML_BUTTON += "<button value='ランダム_" + _KEY + "'>[ランダム]</button> "
		HTML_BUTTON += "<button value='クリア_" + _KEY + "'>[クリア]</button> "
	ENDIF
  CASEELSE
	HTML_BUTTON += "<button value='" + _KEY + "'>[選択]</button> "
	IF DIC_GET(画像エディット_パーツ固定設定, _KEY) == "固定"
		HTML_BUTTON += "<button value='固定_" + _KEY + "'>[解除]</button> "
		HTML_BUTTON += "<s><button >[ランダム]</button></s> "
	ELSE
		HTML_BUTTON += "<button value='固定_" + _KEY + "'>[固定]</button> "
		HTML_BUTTON += "<button value='ランダム_" + _KEY + "'>[ランダム]</button> "
	ENDIF
ENDSELECT
HTML_PRINT HTML_BUTTON

;********************************************************************************************
;画像エディット画面：ランダム選択時の処理を行う
;********************************************************************************************
@画像エディット_ランダム処理(選択項目)
#DIMS 選択項目	; 入力の後方部分を抜き出した項目を格納
#DIM _CNT		; カウンタ

SELECTCASE 選択項目
	CASE "全要素"
		CALL パーツランダム変更(画像エディット_パーツ文字列, "前髪")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "後髪")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "頭部")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "目瞳")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "表情")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "身体")
		FOR _CNT, 0, 10
			IF RAND:100 < 画像エディット_全要素装飾指定率
				CALL パーツランダム変更(画像エディット_パーツ文字列, @"装飾{_CNT}")
			ELSE
				SIF DIC_GET(画像エディット_パーツ固定設定, @"装飾{_CNT}") != "固定"
					画像エディット_パーツ文字列 '= DIC_SET(画像エディット_パーツ文字列, @"装飾{_CNT}", "装飾_なし")
			ENDIF
		NEXT
		CALL パーツランダム変更(画像エディット_パーツ文字列, "髪色")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "瞳色")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "肌色")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "服色")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "耳色")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "尾色")
	CASE "全身"
		CALL パーツランダム変更(画像エディット_パーツ文字列, "前髪")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "後髪")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "頭部")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "目瞳")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "表情")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "身体")
	CASE "全装飾"
		FOR _CNT, 0, 10
			IF RAND:100 < 画像エディット_全装飾装飾指定率
				CALL パーツランダム変更(画像エディット_パーツ文字列, @"装飾{_CNT}")
			ELSE
				SIF DIC_GET(画像エディット_パーツ固定設定, @"装飾{_CNT}") != "固定"
					画像エディット_パーツ文字列 '= DIC_SET(画像エディット_パーツ文字列, @"装飾{_CNT}", "装飾_なし")
			ENDIF
		NEXT
	CASE "全色"
		CALL パーツランダム変更(画像エディット_パーツ文字列, "髪色")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "瞳色")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "肌色")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "服色")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "耳色")
		CALL パーツランダム変更(画像エディット_パーツ文字列, "尾色")
	CASEELSE
		CALL パーツランダム変更(画像エディット_パーツ文字列, 選択項目)
ENDSELECT

;********************************************************************************************
;指定された項目をランダムに変更して上書き
;********************************************************************************************
@パーツランダム変更(パーツ文字列, 選択項目)
#DIMS REF パーツ文字列	; 現在のパーツ文字列
#DIMS 選択項目			; 入力の後方部分を抜き出した項目を格納
#DIMS パーツリスト		; ランダム対象のパーツリスト
#DIMS ランダムパーツ名	; ランダムに抽出したパーツ名

; 選択項目が固定時の場合は、処理を抜ける
SIF DIC_GET(画像エディット_パーツ固定設定, 選択項目) == "固定"
	RETURN
パーツリスト '= DIC_GET(パーツ選択肢(), パーツ選択項目調整(選択項目))
; 先頭の "装飾_なし," のような項目を排除
SIF SUBSTRINGU(パーツリスト, 2, 4) == "_なし,"
  パーツリスト '=  SUBSTRINGU(パーツリスト, 6, -1)
ランダムパーツ名 '= TEXTR(REPLACE(パーツリスト, ",", "/"))
; 分類あたった時は再度取得
IF (SUBSTRINGU(ランダムパーツ名, 0, 2) == "分類")
	パーツリスト '= DIC_GET(パーツ選択肢(), パーツ選択項目調整(ランダムパーツ名))
	ランダムパーツ名 '= TEXTR(REPLACE(パーツリスト, ",", "/"))
ENDIF
パーツ文字列 '= DIC_SET(パーツ文字列, 選択項目, ランダムパーツ名)

;********************************************************************************************
;画像エディット画面：クリア選択時の処理を行う
;********************************************************************************************
@画像エディット_クリア処理(選択項目)
#DIMS 選択項目	; 入力の後方部分を抜き出した項目を格納
#DIM _CNT		; カウンタ

SELECTCASE 選択項目
	CASE "全装飾"
		FOR _CNT, 0, 10
			SIF DIC_GET(画像エディット_パーツ固定設定, @"装飾{_CNT}") != "固定"
				画像エディット_パーツ文字列 '= DIC_SET(画像エディット_パーツ文字列, @"装飾{_CNT}", "装飾_なし")
		NEXT
	CASEELSE
		SIF DIC_GET(画像エディット_パーツ固定設定, 選択項目) != "固定"
			画像エディット_パーツ文字列 '= DIC_SET(画像エディット_パーツ文字列, 選択項目, "装飾_なし")
ENDSELECT

;********************************************************************************************
;画面上に表示するパーツ名を調整して返す関数
;********************************************************************************************
@パーツ名抽出(正式パーツ名称, SELECTEDKEY)
#FUNCTIONS
#DIMS 正式パーツ名称	; "前髪_ボブカット"のような、パーツ名称
#DIMS SELECTEDKEY		; 選択中のキー

IF 正式パーツ名称 == SELECTEDKEY
	; 選択項目と同じ場合、"돌아간다"を返す
	RETURNF "돌아간다"
ELSEIF (-1 < STRFINDU(正式パーツ名称, "_"))
	; "後髪_ボブカット" の場合、"ボブカット" を返す
	RETURNF SUBSTRINGU(正式パーツ名称, 3, -1)
ELSE
	RETURNF 正式パーツ名称
ENDIF

;********************************************************************************************
;キー入力値から、装飾1~9などの不要な数値を排除して返す関数
;********************************************************************************************
@パーツ選択項目調整(_KEY)
#FUNCTIONS
#DIMS _KEY	; キー入力値

IF (STRFINDU(_KEY, "_") == -1 && SUBSTRINGU(_KEY, 0, 2) == "装飾")
  ; 装飾1~の場合、特殊処理
  RETURNF "装飾"
ELSE
  RETURNF _KEY
ENDIF
