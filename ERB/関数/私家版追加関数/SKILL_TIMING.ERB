;_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/#
;
;	Module		:SKILL_TIMING.ERB
;	Facility	:スキルERB側で特定のタイミングで発生する処理を管理する関数
;
;	Licence		:。
;
;	Modification Data:
;
;	Edit	Date			Author					Reason
;	001		2022/03/20		しゃけ					新規作成
;	002		2022/05/25		しゃけ					エラー修正、別スキル番号の同じ専用技は発動しないように変更、もう使わないであろうコメント部分削除
;_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/#

;通常スキル用 専用技は別の呼び方で呼ぶので、専用技1 ~ 専用技12に関数を追加しないように注意

;習得済みスキルの中からスキルERBにある特定の関数を呼び出す奴
@SEARCH_SKILL_FUNCTION,ARG,ARGS,ARG:1 = 0
#LOCALSIZE 3
#DIM SKILL_STOCK,41
;ARG	対象のキャラ
;ARGS	呼び出す関数名
;ARG:1	0なら装備スキルと通常スキルを、1なら装備スキルのみを、-1以下なら通常スキルのみ検索
;キャラが存在しない場合は終了
;あなたの番号が0なの普通に忘れてたので変更
SIF ARG < 0 || ARG >= CHARANUM
	RETURN
VARSET SKILL_STOCK
LOCAL:2 = CHARA_SKILLCOUNT(ARG)
FOR LOCAL,1,42
	SIF (ARG:1 > 0 && LOCAL > 20) || (ARG:1 < 0 && LOCAL < 21)
		CONTINUE
	LOCAL = LOCAL == LOCAL:2 + 1 ? 21 # LOCAL
	LOCAL:1 = ABL:ARG:@"\@ LOCAL > 20 ? 장비 # \@스킬{LOCAL > 20 ? LOCAL - 20 # LOCAL}"
	SIF !LOCAL:1 && LOCAL > LOCAL:2	;装備スキルの終端まで行ったら抜ける
		BREAK
	SIF MATCH(SKILL_STOCK,LOCAL:1)
		CONTINUE
	SKILL_STOCK:LOCAL = LOCAL:1
	RESULTS = 
	IF INRANGE(LOCAL:1,[[스킬:전용기1]],[[스킬:전용기12]])
		RESULTS = %CSTR:ARG:GETNUM(CSTR,@"전용기{LOCAL:1 - 3903}")%
		SIF PU_SKILLNUM_GET(ARG,RESULTS) != LOCAL:1
			CONTINUE
	ENDIF
	RESULTS = \@ RESULTS == "" ? %TOSTR(LOCAL:1)% # %RESULTS% \@
	TRYCALLFORM SKILL_%ARGS%_%RESULTS%,ARG
NEXT

;複数のキャラでSEARCH_SKILL_FUNCTONする時に使う。戦闘中に参加しているキャラと調教助手キャラのみ対応
@MULTI_SEARCH_SKILL_FUNCTION,ARG,ARGS,ARG:1,ARG:2,ARG:3,ARG:4 = 0
#DIM LCOUNT
#DIM L_USER
;ARG	使わない
;ARGS	呼び出す関数名
;ARG:1	0なら装備スキルと通常スキルを、1なら装備スキルのみを、-1以下なら通常スキルのみ検索
;ARG:2	検索開始するポジション
;ARG:3	検索終了するポジション
;ARG:4	0なら調教助手キャラも検索、それ以外なら検索しない
FOR LCOUNT,ARG:2,(ARG:3 + 1)
	L_USER = LCOUNT != ARG:3 ? POS(LCOUNT) # ASSI
	;キャラが存在しない or 助手検索中以外のタイミングで助手が選択された or もしくは最後のループ時に助手キャラを選択しない場合は次のループへ
	SIF L_USER < 0 || (LCOUNT != ARG:3 && L_USER == ASSI) || (LCOUNT == ARG:3 && ARG:4 != 0)
		CONTINUE
	CALL SEARCH_SKILL_FUNCTION,L_USER,ARGS,ARG:1
NEXT

@SKILL_TIMING,ARGS = "BATTLE_START"
#LOCALSIZE 2
#LOCALSSIZE 1
;#DIM LCOUNT
;#DIM L_USER
;#DIM F_EQ_SKL
;ARGS	タイミングの指定。 戦闘開始時なら"BATTLE_START",戦闘終了時なら"BATTLE_END",ターン開始時なら"TURNSTART",ターン終了時なら"TURNEND",SHOP画面到着時なら"INITIALIZE"
;
;PRINTFORMW %ARGS%中のタイミング処理
;想定されていない文字列なら終了
SIF !GROUPMATCH(ARGS,"BATTLE_START","BATTLE_END","TURNSTART","TURNEND","INITIALIZE")
	RETURN
;SHOP画面時の処理なら戦闘に参加している味方キャラ+助手キャラまで、それ以外なら戦闘に参加している味方キャラと敵キャラ+助手キャラまで検索
;LCOUNT = ARGS == "INITIALIZE" ? 7 # 17
;PRINTFORMW キャラ検索上限値 {LCOUNT:1}
;PRINTW 戦闘開始時のスキル効果の確認をします
CALL MULTI_SEARCH_SKILL_FUNCTION,0,ARGS,0,1,ARGS == "INITIALIZE" ? 7 # 17

;;戦闘開始時の処理。 発生タイミングはオートカジャや装備の戦闘開始時効果の後
;@SKILL_BATTLE_START

;;戦闘終了時の処理。 発生タイミングは敵キャラ削除処理と行動順表のリセットとORGY,HEAT,FLYの自動回復処理の後。
;@SKILL_BATTLE_END

;;ターン開始時の処理。 発生タイミングはBATTLE_TURNSTARTの$ACTION_LOOPより前。「行動順一人目が存在しない場合ターンエンドする」より前に処理が行われる点に注意。
;@SKILL_TURNSTART

;;ターン終了時の処理。 発生タイミングはガードキル効果ターン減少とDゲージ減少の直後
;@SKILL_TURNEND

;;SHOP到着時に行う処理。 発生タイミングはFゲージリセットの直後。
;@SKILL_INITIALIZE

;--------------------------------------------------
;おまけ

;治癒促進系、気功系の処理を共通化させた関数
@VAR_REGEN,ARG,ARG:1,ARGS = "ＨＰ",ARG:2,ARG:3,ARG:4
#DIM L_MAG_TARG
#DIMS L_MAG_TARGS
;ARG	対象キャラ
;ARG:1	スキル番号
;ARGS	回復するパラメータの種類。 デフォルトはＨＰ。 ＭＰを回復したいなら"ＭＰ"と書く
;ARG:2	回復量
;ARG:3	ＭＡＧの消費コスト量
;ARG:4	真で回復時に汎用メッセージを表示しない。 独自のメッセージを表示するなら真にしておくように
;L_MAG_TARG		ＭＡＧの消費先
;L_MAG_TARGS	ＭＡＧの消費先の文字列　MAG主人消費 or MAG自己消費 or （空白）
;PRINTFORMW %ARGS% 자동회복의 처리 체크를 실행합니다
;該当する自動回復の優先度を確認
CALL VAR_REGENABLE_CHECK,ARG,ARG:1,TOHALF(ARGS)
;該当する自動回復の優先度を確認
;CALLFORM SKILL_NAME_{ARG:1},ARG
;PRINTFORMW %RESULTS%によるVAR_REGEN処理を開始
SIF RESULT == 0
	RETURN
;PRINTFORMW 達成
L_MAG_TARG = ARG
VARSET L_MAG_TARGS,""
;パーティキャラで、尚且つＭＡＧコストが1以上なら分岐
IF CFLAG:ARG:PT플래그 > 0 && ARG:3 > 0
	;MAG主人消費の設定ならL_MAG_TARGにMASTERが、違うならARGが代入される
	L_MAG_TARG = (CFLAG:ARG:ＭＡＧ자기소비 == 0 && ABL:ARG:종족 != 0 && ABL:ARG:종족 != 45) ? MASTER # ARG
	;MAG主人消費であり、MASTERのＭＡＧが消費ＭＡＧ未満ならばL_MAG_TARGをARGに変更
	SIF L_MAG_TARG == MASTER && (BASE:MASTER:ＭＡＧ < ARG:3)
		L_MAG_TARG = ARG
	;ＭＡＧ不足ならこの時点で終了
	SIF BASE:L_MAG_TARG:ＭＡＧ < ARG:3
		RETURN 0
	;L_MAG_TARGの値に応じてL_MAG_TARGSに文字列を入れる
	L_MAG_TARGS = \@ (L_MAG_TARG == MASTER && MASTER != ARG) ? MAG주인소비 # MAG자기소비 \@
	;IF L_MAG_TARG == ARG
	;	L_MAG_TARGS = MAG自己消費
	;ELSE
	;	L_MAG_TARGS = MAG主人消費
	;ENDIF
	;このタイミングでＭＡＧを消費
	CALL CONTROL_MAG,L_MAG_TARG,-ARG:3
ENDIF
VARSET RESULTS,"",0,1
SIF ARG:1 > 0
	TRYCALLFORM SKILL_NAME_{ARG:1},ARG
SIF ARG:4 == 0
	PRINTFORML %RESULTS% %CALLNAME:ARG% >>>>> { ARG:2 }회복 %L_MAG_TARGS%
;SIF CFLAG:ARG:PT플래그 > 0
;	PRINTFORM (MAG\@ L_MAG_TARG == MASTER ? 主人 # 自己\@消費)
;PRINTL
TRYCALLFORM VAR_%TOHALF(ARGS)%,ARG,ARG:2,3

;自動回復の優先度を確認する処理
@VAR_REGENABLE_CHECK,ARG,ARG:1,ARGS = "HP"
#LOCALSIZE 2
#LOCALSSIZE 1
#DIM REGEN_RANK,2
;ARG	対象のキャラ
;ARG:1	スキル番号
;ARGS	回復するパラメータの種類。 デフォルトは"HP"。 ＭＰを回復したいなら"MP"と書く。 全角ではなく半角文字な点に注意
;キャラが存在しない or スキル番号が存在しない場合は終了
;PRINTFORMW %ARGS% 자동회복의 우선도를 체크합니다
SIF ARG < 0 || ARG:1 < 0
	RETURN
VARSET REGEN_RANK
TRYCALLFORM SKILL_%ARGS%_REGEN_RANK_{ARG:1},ARG
REGEN_RANK:0 = RESULT
;PRINTFORMW REGEN_RANK:0 {REGEN_RANK:0}
VARSET RESULT,0,0,20
LOCAL:1 = CHARA_SKILLCOUNT(ARG)
FOR LOCAL,0,LOCAL:1
	RESULT = 0
	SIF ARG:1 < 0
		BREAK
	;呼び出すスキル枠を用意。F_EQ_SKLが偽なら通常スキルを、真なら装備スキルを検索する
	LOCALS = 스킬{LOCAL+1}
	;CSTR専用技なら分岐する
	IF INRANGE(ABL:ARG:LOCALS,[[스킬:전용기1]],[[스킬:전용기12]])
		;CSTRに書かれてる文字列を参照する為に該当する専用技（１～１２）の名前を代入
		CALLFORM SKILL_NAME_{ABL:ARG:LOCALS},-1
		TRYCALLFORM SKILL_%ARGS%_REGEN_RANK_%CSTR:ARG:RESULTS%,ARG
	ELSE
		TRYCALLFORM SKILL_%ARGS%_REGEN_RANK_{ABL:ARG:LOCALS},ARG
	ENDIF
	;PRINTFORMW スキル{LOCAL+1}  RESULT {RESULT}
	REGEN_RANK:1 = MAX(REGEN_RANK:1,RESULT)
NEXT
FOR LOCAL,0,21
	RESULT = 0
	SIF ARG:1 < 0
		BREAK
	LOCALS = 장비스킬{LOCAL+1}
	;CSTR専用技なら分岐する
	IF INRANGE(ABL:ARG:LOCALS,[[스킬:전용기1]],[[스킬:전용기12]])
		;CSTRに書かれてる文字列を参照する為に該当する専用技（１～１２）の名前を代入
		CALLFORM SKILL_NAME_{ABL:ARG:LOCALS},-1
		TRYCALLFORM SKILL_%ARGS%_REGEN_RANK_%CSTR:ARG:RESULTS%,ARG
	ELSE
		TRYCALLFORM SKILL_%ARGS%_REGEN_RANK_{ABL:ARG:LOCALS},ARG
	ENDIF
	;PRINTFORMW 装備スキル{LOCAL}  RESULT {RESULT}
	REGEN_RANK:1 = MAX(REGEN_RANK:1,RESULT)
NEXT
;PRINTFORMW REGEN_RANK:0 {REGEN_RANK:0}  REGEN_RANK:1 {REGEN_RANK:1}
SIF REGEN_RANK:0 < REGEN_RANK:1
	RETURN 0
RETURN 1

;カジャオート系の処理を少し綺麗にした奴
@VAR_KAJA,ARG,ARG:1,ARG:2 = 4,ARG:3 = 32,ARG:4,ARG:5
#DIM LCOUNT,4
#DIMS BUFF_TYPE
;ARG	スキル所有者
;ARG:1	呼び出すバフ強化の番号。 0 = 攻撃,1 = 命中,2 = 防御,3 = 回避,4 = 魔法威力, 5 = 魔法効果,6 = クリティカル,7 = BS
;ARG:2	強化量。 何も書かなければ4に設定される
;ARG:3	強化上限。 何も書かなければ32に設定される
;ARG:4	開始ポジション
;ARG:5	終了ポジション
IF ARG:4 < 1 || ARG:5 < 1
	LCOUNT:1 = CFLAG:ARG:PT플래그 > 0 ? 1 # 7
	LCOUNT:2 = CFLAG:ARG:PT플래그 > 0 ? 7 # 17
ELSE
	LCOUNT:1 = ARG:4
	LCOUNT:2 = ARG:5
ENDIF
;事故防止の為に7を超えていたら7に戻す
ARG:1 = MIN(ARG:1,7)
BUFF_TYPE = %CFLAGNAME:(GETNUM(CFLAG,"공격강화")+ARG:1)%
FOR LCOUNT,LCOUNT:1,LCOUNT:2
	LCOUNT:3 = POS(LCOUNT)
	SIF LCOUNT:3 < 0
		CONTINUE
	;キャラの新しいバフ強化値 = MAX(加算前のバフ強化値,MIN(加算前のバフ強化値 + 強化量,強化上限))
	;メモ：数式の都合上、負の値を使うと破綻する点に注意（やろうと思えば対応できるけど、態々VAR_KAJAでやる理由がない）
	CFLAG:(LCOUNT:3):BUFF_TYPE = MAX(CFLAG:(LCOUNT:3):BUFF_TYPE,MIN(CFLAG:(LCOUNT:3):BUFF_TYPE + ARG:2,ARG:3))
NEXT
